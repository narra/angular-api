{"version":3,"file":"narra-api.js","sources":["../projects/api/src/lib/enums/event-status.enum.ts","../projects/api/src/lib/enums/item-type.enum.ts","../projects/api/src/lib/enums/query-operator.enum.ts","../projects/api/src/lib/enums/role-type.enum.ts","../projects/api/src/lib/enums/scenario-type.enum.ts","../projects/api/src/lib/enums/index.ts","../projects/api/src/lib/helpers/error.helper.ts","../projects/api/src/lib/helpers/meta.helper.ts","../projects/api/src/lib/helpers/index.ts","../projects/api/src/lib/models/action.ts","../projects/api/src/lib/models/author.ts","../projects/api/src/lib/models/candidate.ts","../projects/api/src/lib/models/connector.ts","../projects/api/src/lib/models/event.ts","../projects/api/src/lib/models/error.ts","../projects/api/src/lib/models/generator.ts","../projects/api/src/lib/models/item.ts","../projects/api/src/lib/models/ingest.ts","../projects/api/src/lib/models/library.ts","../projects/api/src/lib/models/log.ts","../projects/api/src/lib/models/meta.ts","../projects/api/src/lib/models/metable.ts","../projects/api/src/lib/models/module.ts","../projects/api/src/lib/models/authorship.ts","../projects/api/src/lib/models/pagination.ts","../projects/api/src/lib/models/pendable.ts","../projects/api/src/lib/models/project.ts","../projects/api/src/lib/models/provider.ts","../projects/api/src/lib/models/proxy.ts","../projects/api/src/lib/models/purgable.ts","../projects/api/src/lib/models/response.ts","../projects/api/src/lib/models/return.ts","../projects/api/src/lib/models/scenario.ts","../projects/api/src/lib/models/selectable.ts","../projects/api/src/lib/models/setting.ts","../projects/api/src/lib/models/synthesizer.ts","../projects/api/src/lib/models/user.ts","../projects/api/src/lib/models/video.ts","../projects/api/src/lib/models/query.ts","../projects/api/src/lib/models/filter.ts","../projects/api/src/lib/models/selector.ts","../projects/api/src/lib/models/index.ts","../projects/api/src/lib/services/server.service.ts","../projects/api/src/lib/services/action.service.ts","../projects/api/src/lib/services/connector.service.ts","../projects/api/src/lib/services/event.service.ts","../projects/api/src/lib/services/generator.service.ts","../projects/api/src/lib/services/item.service.ts","../projects/api/src/lib/services/library.service.ts","../projects/api/src/lib/services/project.service.ts","../projects/api/src/lib/services/provider.service.ts","../projects/api/src/lib/services/return.service.ts","../projects/api/src/lib/services/scenario.service.ts","../projects/api/src/lib/services/setting.service.ts","../projects/api/src/lib/services/synthesizer.service.ts","../projects/api/src/lib/services/system.service.ts","../projects/api/src/lib/services/upload.service.ts","../projects/api/src/lib/services/user.service.ts","../projects/api/src/lib/services/index.ts","../../projects/api/src/lib/index.ts","../../../projects/api/src/public_api.ts","../../../projects/api/src/narra-api.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport enum EventStatus {\n  pending = 'pending',\n  running = 'running',\n  done = 'done'\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport enum ItemType {\n  text = 'text',\n  audio = 'audio',\n  video = 'video',\n  picture = 'picture'\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport enum QueryOperator {\n  or = 'or',\n  and = 'and'\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport enum RoleType {\n  admin = 'admin',\n  author = 'author'\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport enum ScenarioType {\n  project = 'project',\n  library = 'library'\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport * from './event-status.enum';\nexport * from './item-type.enum';\nexport * from './query-operator.enum';\nexport * from './role-type.enum';\nexport * from './scenario-type.enum';\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {throwError} from 'rxjs';\n\nexport class ErrorHelper {\n\n  public static handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Meta, Metable} from '../models';\n\nexport class MetaHelper {\n\n  public static getMeta(object: Metable, name: string): Meta {\n    return object.metadata.find((meta) => {\n      return meta.name === name;\n    });\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport * from './error.helper';\nexport * from './meta.helper';\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Event} from './event';\nimport {Return} from './return';\n\nexport interface Action {\n  identifier: string;\n  name: string;\n  description: string;\n  priority: number;\n  dependency: string[];\n  return?: string;\n  multi?: boolean;\n  returns?: Return[];\n  event?: Event;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Author {\n  id: string;\n  email: string;\n  name: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Proxy} from './proxy';\n\nexport interface Candidate {\n  library: string;\n  proxy: Proxy;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Connector {\n  identifier: string;\n  name: string;\n  description: string;\n  priority: number;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Item} from './item';\nimport {Library} from './library';\nimport {Project} from './project';\nimport {EventStatus} from '../enums';\n\nexport interface Event {\n  id: string;\n  message: string;\n  progress: number;\n  status: EventStatus;\n  item: Item;\n  library: Library;\n  project: Project;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Error {\n  message: string;\n  trace: string[];\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Generator {\n  name: string;\n  description: string;\n  dependency: string[];\n  priority: number;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Library} from './library';\nimport {ItemType} from '../enums';\nimport {Purgable} from './purgable';\nimport {Pendable} from './pendable';\nimport {Metable} from './metable';\n\nexport interface Item extends Purgable, Pendable, Metable {\n  id: string;\n  name: string;\n  url: string;\n  connector: string;\n  type: ItemType;\n  thumbnails: string[];\n  library: Library;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Ingest {\n  url: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Scenario} from './scenario';\nimport {Authorship} from './authorship';\nimport {Purgable} from './purgable';\nimport {Metable} from './metable';\n\nexport interface Library extends Authorship, Purgable, Metable {\n  id: string;\n  name: string;\n  description: string;\n  shared: boolean;\n  scenario: Scenario;\n  thumbnails: string[];\n  updated_at: Date;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Log {\n  name: string;\n  log: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Meta {\n  name: string;\n  value: string;\n  generator: string;\n  public: boolean;\n  in?: number;\n  out?: number;\n  updated_at: Date;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Meta} from './meta';\n\nexport interface Metable {\n  metadata: Meta[];\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Module {\n  name: string;\n  version: string;\n  summary: string;\n  description: string;\n  authors: string[];\n  email: string[];\n  homepage: string;\n  license: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Author} from './author';\n\nexport interface Authorship {\n  author: Author;\n  contributors: Author[];\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Pagination {\n  total: number;\n  totalPages: number;\n  page: number;\n  perPage: number;\n  nextPage: number;\n  prevPage: number;\n  offset: number;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Pendable {\n  pending: boolean;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Scenario} from './scenario';\nimport {Library} from './library';\nimport {Authorship} from './authorship';\nimport {Metable} from './metable';\n\nexport interface Project extends Authorship, Metable {\n  id: string;\n  name: string;\n  description: string;\n  public: boolean;\n  scenario: Scenario;\n  thumbnails: string[];\n  libraries: Library[];\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Provider {\n  name: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {ItemType} from '../enums';\nimport {Selectable} from './selectable';\n\nexport interface Proxy extends Selectable {\n  name: string;\n  type: ItemType;\n  source_url: string;\n  download_url: string;\n  thumbnails: string[];\n  connector: string;\n  options: {};\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Purgable {\n  purged: boolean;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Error} from './error';\nimport {Pagination} from './pagination';\n\nexport type Response<T, Key extends string> = {\n  // handle errors\n  errors: Error[];\n  // handle pagination\n  pagination?: Pagination;\n  // handle data based on Key\n} & {[P in Key]: T};\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Return {\n  id: string;\n  url?: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {ScenarioType} from '../enums';\nimport {Authorship} from './authorship';\n\nexport interface Scenario extends Authorship {\n  id: string;\n  name: string;\n  description: string;\n  type: ScenarioType;\n  shared: boolean;\n  thumbnails: string[];\n  updated_at: Date;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Selectable {\n  selected: boolean;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Setting {\n  name: string;\n  value: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Synthesizer {\n  title: string;\n  description: string;\n  dependency: string[];\n  priority: number;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {RoleType} from '../enums';\nimport {Author} from './author';\nimport {Provider} from './provider';\n\nexport interface User extends Author {\n  image: string;\n  roles: RoleType[];\n  identities: Provider[];\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Item} from './item';\n\nexport interface Video extends Item {\n  video_proxy_hq: string;\n  video_proxy_lq: string;\n  audio_proxy: string;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {QueryOperator} from '../enums';\n\nexport interface Query {\n  // query regex string\n  query: string;\n  // which fields we're searching for, default: [name, meta.value]\n  queryFields?: string[];\n  // logical operator between fields, default: or\n  queryOperator?: QueryOperator;\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Filter {\n  // filters unnecessary fields\n  filters: string[];\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport interface Selector {\n  name: string;\n  content: string[];\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport * from './action';\nexport * from './author';\nexport * from './candidate';\nexport * from './connector';\nexport * from './event';\nexport * from './error';\nexport * from './generator';\nexport * from './item';\nexport * from './ingest';\nexport * from './library';\nexport * from './log';\nexport * from './meta';\nexport * from './metable';\nexport * from './module';\nexport * from './authorship';\nexport * from './pagination';\nexport * from './pendable';\nexport * from './project';\nexport * from './provider';\nexport * from './proxy';\nexport * from './purgable';\nexport * from './response';\nexport * from './return';\nexport * from './scenario';\nexport * from './selectable';\nexport * from './setting';\nexport * from './synthesizer';\nexport * from './user';\nexport * from './video';\nexport * from './query';\nexport * from './filter';\nexport * from './selector';\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {Pagination, Filter, Selector, Query} from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n  private server: string;\n  private version: number;\n  private initialized: boolean;\n\n  constructor() {\n    // default values\n    this.server = 'http://api.narra';\n    this.version = 1;\n    this.initialized = false;\n  }\n\n  //\n  // initialize\n  //\n  public initialize(server?: string, version?: number): void {\n    // set server if provided\n    if (server) {\n      this.server = server;\n    }\n    // set version if provided\n    if (version) {\n      this.version = version;\n    }\n    // set init flag\n    this.initialized = true;\n  }\n\n  //\n  // getters\n  //\n  public get apiServer(): string {\n    return this.server;\n  }\n\n  public get apiVersion(): number {\n    return this.version;\n  }\n\n  public get isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  //\n  // public methods\n  //\n  public query(path: string, filter?: Filter, pagination?: Pagination, query?: Query, selectors?: Selector[]): string {\n    // prepare params\n    let params = `${path}?`;\n    // filters\n    if (filter) {\n      filter.filters.forEach((f: string) => {\n        params += `filters[]=${f}&`;\n      });\n    }\n    // selectors\n    if (selectors) {\n      selectors.forEach((selector) => {\n        selector.content.forEach((value) => {\n          params += `${selector.name}[]=${value}&`;\n        });\n      });\n    }\n    // query\n    if (query) {\n      // add query fields\n      params += `query=${query.query}&`;\n      // add operator\n      if (query.queryOperator) {\n        params += `query_operator=${query.queryOperator}&`;\n      }\n      // add fields\n      if (query.queryFields) {\n        query.queryFields.forEach((field) => {\n          params += `query_fields[]=${field}&`;\n        });\n      }\n    }\n    // pagination\n    if (pagination) {\n      // add pagination parameters\n      params += `page=${pagination.page}&per_page=${pagination.perPage}&offset=${pagination.offset}`;\n    }\n    // check for pagination\n    return this.server + '/v' + this.version + '/' + params;\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport  {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Action, Filter, Response} from '../models';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActionService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET actions '/v1/actions'\n  public getActions(filter?: Filter): Observable<Response<Action[], 'actions'>> {\n    return this.http.get<any>(this.serverService.query('actions', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST perform action '/v1/action/:identifier/perform'\n  public performAction(items: string[], action: Action, filter?: Filter): Observable<Response<Action, 'action'>> {\n    return this.http.post<any>(this.serverService.query(`actions/${action.identifier}/perform`, filter), { items }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Connector, Filter, Response} from '../models';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET connectors '/v1/connectors'\n  public getConnectors(filter?: Filter): Observable<Response<Connector[], 'connectors'>> {\n    return this.http.get<any>(this.serverService.query('connectors', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Event, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET events by default '/v1/events/me' possibly can be modified to admin's all '/v1/events'\n  public getEvents(selection: string = 'me', filter?: Filter): Observable<Response<Event[], 'events'>> {\n    return this.http.get<any>(this.serverService.query('events/' + selection, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Generator, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneratorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET generators '/v1/generators'\n  public getGenerators(filter?: Filter): Observable<Response<Generator[], 'generators'>> {\n    return this.http.get<any>(this.serverService.query('generators', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {catchError, map, mergeMap, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Candidate, Item, Library, Meta, Proxy, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST check url '/v1/items/check'\n  public check(url: string, filter?: Filter): Observable<Response<Proxy[], 'proxies'>> {\n    return this.http.post<any>(this.serverService.query('items/check', filter), { url }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new item '/v1/items/new'\n  public addItems(candidates: Candidate[], filter?: Filter): Observable<Response<string[], 'events'>> {\n    return this.http.post<any>(this.serverService.query('items/new', filter), { candidates }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET item '/v1/items/{id}'\n  public getItem(id: string, filter?: Filter): Observable<Response<Item, 'item'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n\n  // POST new item metadata '/v1/items/{name}/metadata/new'\n  public addItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update item metadata '/v1/items/{name}/metadata/{meta}/update'\n  public updateItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete item metadata '/v1/items/{name}/metadata/{meta}/delete'\n  public deleteItemMeta(id: string, meta: Pick<Meta, 'name' | 'generator'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/delete?generator=' + meta.generator))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Filter, Response, Query, Return} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibraryService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/libraries/validate'\n  public validate(name: string, filter?: Filter): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('libraries/validate', filter), {name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET libraries '/v1/libraries'\n  public getLibraries(filter?: Filter): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('libraries', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library '/v1/libraries/{id}'\n  public getLibrary(id: string, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library items '/v1/libraries/{id}/items'\n  public getItems(id: string, filter?: Filter, pagination?: Pagination, query?: Query): Observable<Response<Item[], 'items'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/items', filter, pagination, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST delete library items '/v1/libraries/{id}/items/delete'\n  public deleteItems(id: string, items: string[]): Observable<Response<string[], 'ids'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/items/delete'), {items}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library '/v1/libraries/new'\n  public addLibrary(library: Library, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/new', filter), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library '/v1/libraries/{id}/update'\n  public updateLibrary(library: Library, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + library.id + '/update', filter), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET clean library '/v1/libraries/{id}/clean'\n  public cleanLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/clean'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library '/v1/libraries/{id}/delete'\n  public deleteLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST export project '/v1/libraries/{id}/export'\n  public exportLibrary(id: string): Observable<Response<Return, 'return'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/export'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST import library '/v1/libraries/{id}/import'\n  public importLibrary(id: string, file: File): Observable<any> {\n    // prepare data\n    const uploadData = new FormData();\n    // set file\n    uploadData.append('file', file);\n    // upload\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/import'), uploadData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(\n      retry(1),\n      catchError(ErrorHelper.handleError)\n    );\n  }\n\n  // POST new library metadata '/v1/libraries/{name}/metadata/new'\n  public addLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library metadata '/v1/libraries/{name}/metadata/{meta}/update'\n  public updateLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library metadata '/v1/libraries/{name}/metadata/{meta}/delete'\n  public deleteLibraryMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Filter, Response, Query, Return} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/projects/validate'\n  public validate(id: string, name: string, filter?: Filter): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('projects/validate', filter), {id, name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET projects '/v1/projects'\n  public getProjects(filter?: Filter): Observable<Response<Project[], 'projects'>> {\n    return this.http.get<any>(this.serverService.query('projects', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project '/v1/projects/{name}'\n  public getProject(id: string, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's items '/v1/projects/{id}/items'\n  // default libraries selector: all\n  // default meta selector: none\n  public getProjectItems(id: string, libraries?: string[], meta?: string[], query?: Query, filter?: Filter, pagination?: Pagination): Observable<Response<Item[], 'items'>> {\n    // prepare selectors\n    const selectors = [];\n    // libraries selector\n    if (libraries) {\n      selectors.push({name: 'libraries', content: libraries});\n    }\n    // meta selector\n    if (meta) {\n      selectors.push({name: 'meta', content: meta});\n    }\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/items', filter, pagination, query, selectors))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's libraries '/v1/projects/{id}/libraries'\n  public getProjectLibraries(id: string, filter?: Filter): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's library '/v1/projects/{id}/libraries/{library}'\n  public getProjectLibrary(id: string, library: string, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries/' + library, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project '/v1/projects/new'\n  public addProject(project: Project, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/new', filter), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project '/v1/projects/{id}/update'\n  public updateProject(project: Project, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + project.id + '/update', filter), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project '/v1/projects/{id}/delete'\n  public deleteProject(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST export project '/v1/projects/{id}/export'\n  public exportProject(id: string): Observable<Response<Return, 'return'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/export'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST export project '/v1/projects/{id}/export'\n  public importProject(id: string, file: File): Observable<any> {\n    // prepare data\n    const uploadData = new FormData();\n    // set file\n    uploadData.append('file', file);\n    // upload\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/import'), uploadData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(\n      retry(1),\n      catchError(ErrorHelper.handleError)\n    );\n  }\n\n  // POST new project metadata '/v1/projects/{id}/metadata/new'\n  public addProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project metadata '/v1/projects/{id}/metadata/{meta}/update'\n  public updateProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project metadata '/v1/projects/{id}/metadata/{meta}/delete'\n  public deleteProjectMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Provider, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProviderService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET authentication providers '/auth/providers'\n  public getProviders(): Observable<Response<Provider[], 'providers'>> {\n    return this.http.get<any>(this.serverService.apiServer + '/auth/providers')\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Filter, Response, Return} from '../models';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReturnService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET return '/v1/returns/:id'\n  public getReturn(id: string, filter?: Filter): Observable<Response<Return, 'return'>> {\n    return this.http.get<any>(this.serverService.query('returns/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Response, Scenario} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET scenarios '/v1/scenarios'\n  public getScenarios(): Observable<Response<Scenario[], 'scenarios'>> {\n    return this.http.get<any>(this.serverService.query('scenarios'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET scenario '/v1/scenarios/{id}'\n  public getScenario(id: string): Observable<Response<Scenario, 'scenario'>> {\n    return this.http.get<any>(this.serverService.query('scenarios/' + id))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Filter, Response, Setting} from '../models';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET settings '/v1/settings'\n  public getSettings(filter?: Filter): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET setting '/v1/settings/{name}'\n  public getSetting(name: string, filter?: Filter): Observable<Response<Setting, 'setting'>> {\n    return this.http.get<any>(this.serverService.query('settings/' + name, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update setting '/v1/settings/{name}/update'\n  public updateSetting(setting: Setting, filter?: Filter): Observable<Response<Setting, 'setting'>> {\n    return this.http.post<any>(this.serverService.query('settings/' + name + '/update', filter), setting, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET settings default values '/v1/settings/defaults'\n  public getDefaults(filter?: Filter): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings/defaults', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ServerService} from './server.service';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Filter, Response, Synthesizer} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SynthesizerService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET synthesizers '/v1/synthesizers'\n  public getSynthesizers(filter?: Filter): Observable<Response<Synthesizer[], 'synthesizers'>> {\n    return this.http.get<any>(this.serverService.query('synthesizers', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Module, Filter, Response, Log} from '../models';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET version '/v1/system/version'\n  public getVersion(filter?: Filter): Observable<Response<string, 'version'>> {\n    return this.http.get<any>(this.serverService.query('system/version', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET modules '/v1/system/modules'\n  public getModules(filter?: Filter): Observable<Response<Module[], 'modules'>> {\n    return this.http.get<any>(this.serverService.query('system/modules', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET log '/v1/system/logs'\n  public getLogs(filter?: Filter): Observable<Response<Log[], 'logs'>> {\n    return this.http.get<any>(this.serverService.query('system/logs', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST upload '/v1/upload'\n  public upload(file: File): Observable<any> {\n    // prepare data\n    const uploadData = new FormData();\n    // set file\n    uploadData.append('file', file);\n    // upload\n    return this.http.post<any>(this.serverService.query('upload'), uploadData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(\n      retry(1),\n      catchError(ErrorHelper.handleError)\n    );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Filter, Response, User} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET logged user '/v1/users/me'\n  public getLoggedUser(filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/me', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/users'\n  public getUsers(filter?: Filter): Observable<Response<User[], 'users'>> {\n    return this.http.get<any>(this.serverService.query('users', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET user '/v1/users/{id}'\n  public getUser(id: string, filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete user '/v1/users/{id}/delete'\n  public deleteUser(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('users/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update user '/v1/users/{id}/update'\n  public updateUser(user: User, filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.post<any>(this.serverService.query('users/' + user.id + '/update', filter), user, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport * from './action.service';\nexport * from './connector.service';\nexport * from './event.service';\nexport * from './generator.service';\nexport * from './item.service';\nexport * from './library.service';\nexport * from './project.service';\nexport * from './provider.service';\nexport * from './return.service';\nexport * from './scenario.service';\nexport * from './server.service';\nexport * from './setting.service';\nexport * from './synthesizer.service';\nexport * from './system.service';\nexport * from './upload.service';\nexport * from './user.service';\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport * from './enums';\nexport * from './helpers';\nexport * from './models';\nexport * from './services';\n","/**\n * Copyright: (c) 2021, Michal Mocnak <michal@narra.eu>, Eric Rosenzveig <eric@narra.eu>\n * Copyright: (c) 2021, Narra Project\n * GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n */\n\nexport * as narra from './lib';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}