{"version":3,"sources":["../projects/api/src/lib/enums/event-status.enum.ts","../projects/api/src/lib/enums/item-type.enum.ts","../projects/api/src/lib/enums/role-type.enum.ts","../projects/api/src/lib/enums/scenario-type.enum.ts","../projects/api/src/lib/helpers/error.helper.ts","../projects/api/src/lib/helpers/meta.helper.ts","../projects/api/src/lib/services/server.service.ts","../projects/api/src/lib/services/connector.service.ts","../projects/api/src/lib/services/event.service.ts","../projects/api/src/lib/services/generator.service.ts","../projects/api/src/lib/services/item.service.ts","../projects/api/src/lib/services/library.service.ts","../projects/api/src/lib/services/project.service.ts","../projects/api/src/lib/services/provider.service.ts","../projects/api/src/lib/services/scenario.service.ts","../projects/api/src/lib/services/setting.service.ts","../projects/api/src/lib/services/synthesizer.service.ts","../projects/api/src/lib/services/system.service.ts","../projects/api/src/lib/services/upload.service.ts","../projects/api/src/lib/services/user.service.ts"],"names":["EventStatus","ItemType","RoleType","ScenarioType","ErrorHelper","handleError","error","ErrorEvent","console","message","status","throwError","MetaHelper","getMeta","object","name","metadata","find","meta","ServerService","this","server","version","initialized","prototype","initialize","Object","defineProperty","query","path","pagination","params","libraries","forEach","library","generators","generator","filters","filter","page","perPage","offset","Injectable","args","providedIn","ConnectorService","http","serverService","getConnectors","get","pipe","retry","catchError","HttpClient","EventService","getEvents","GeneratorService","getGenerators","ItemService","httpOptions","headers","HttpHeaders","Content-Type","check","url","post","addItems","candidates","getItem","id","addItemMeta","updateItemMeta","deleteItemMeta","LibraryService","validate","getLibraries","getLibrary","getItems","addLibrary","updateLibrary","deleteLibrary","addLibraryMeta","updateLibraryMeta","deleteLibraryMeta","ProjectService","getProjects","getProject","getProjectItems","getProjectLibraries","getProjectLibrary","addProject","project","updateProject","deleteProject","addProjectMeta","updateProjectMeta","deleteProjectMeta","ProviderService","getProviders","apiServer","ScenarioService","getScenarios","getScenario","SettingService","getSettings","getSetting","updateSetting","setting","getDefaults","SynthesizerService","getSynthesizers","SystemService","getVersion","getModules","UploadService","upload","file","uploadData","FormData","append","reportProgress","observe","UserService","getLoggedUser","getUsers","getUser","username","deleteUser","updateUser","user"],"mappings":";;;;;;;;;;;;;;;;;;;;;;OAuBA,IAAYA,ECAAC,ECAAC,ECAAC,GHAZ,SAAYH,GACVA,EAAA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,KAAA,OAHF,CAAYA,IAAAA,EAAW,KCAvB,SAAYC,GACVA,EAAA,KAAA,OACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,QAAA,UAJF,CAAYA,IAAAA,EAAQ,KCApB,SAAYC,GACVA,EAAA,MAAA,QACAA,EAAA,OAAA,SAFF,CAAYA,IAAAA,EAAQ,KCApB,SAAYC,GACVA,EAAA,QAAA,UACAA,EAAA,QAAA,UAFF,CAAYA,IAAAA,EAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGxB,IAAAC,EAAA,WAAA,SAAAA,YAEgBA,EAAAC,YAAP,SAAmBC,GAYxB,OAXIA,EAAMA,iBAAiBC,WAEzBC,QAAQF,MAAM,qBAAsBA,EAAMA,MAAMG,SAIhDD,QAAQF,MACN,yBAAyBA,EAAMI,OAA/B,eACaJ,EAAMA,OAGhBK,EAAAA,WACL,sDAfN,GCDAC,EAAA,WAAA,SAAAA,YAEgBA,EAAAC,QAAP,SAAeC,EAAiBC,GACrC,OAAOD,EAAOE,SAASC,MAAK,SAACC,GAC3B,OAAOA,EAAKH,OAASA,QAJ3B,GCIAI,EAAA,WAKE,SAAAA,IAEEC,KAAKC,OAAS,mBACdD,KAAKE,QAAU,EACfF,KAAKG,aAAc,SAMdJ,EAAAK,UAAAC,WAAA,SAAWJ,EAAiBC,GAE7BD,IACFD,KAAKC,OAASA,GAGZC,IACFF,KAAKE,QAAUA,GAGjBF,KAAKG,aAAc,GAMrBG,OAAAC,eAAWR,EAAAK,UAAA,YAAS,KAApB,WACE,OAAOJ,KAAKC,wCAGdK,OAAAC,eAAWR,EAAAK,UAAA,aAAU,KAArB,WACE,OAAOJ,KAAKE,yCAGdI,OAAAC,eAAWR,EAAAK,UAAA,gBAAa,KAAxB,WACE,OAAOJ,KAAKG,6CAMPJ,EAAAK,UAAAI,MAAA,SAAMC,EAAcD,EAAeE,GAExC,IAAIC,EAASF,EAiCb,OA/BID,IAEFG,GAAU,IAENH,EAAMI,WACRJ,EAAMI,UAAUC,SAAQ,SAACC,GACvBH,GAAU,eAAeG,EAAO,OAIhCN,EAAMO,YACRP,EAAMO,WAAWF,SAAQ,SAACG,GACxBL,GAAU,gBAAgBK,EAAS,OAInCR,EAAMS,SACRT,EAAMS,QAAQJ,SAAQ,SAACK,GACrBP,GAAU,aAAaO,EAAM,QAK/BR,IAEGF,IACHG,GAAU,KAGZA,GAAU,QAAQD,EAAWS,KAAI,aAAaT,EAAWU,QAAO,WAAWV,EAAWW,QAEjFrB,KAAKC,OAAS,KAAOD,KAAKE,QAAU,IAAMS,KAjFrD;;;;;;;;;;;;;;;;;;;;;;sHAHCW,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY;;;;;;;;;;;;;;;;;;;;;;;ACOd,IAAAC,EAAA,WAEE,SAAAA,EAAoBC,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvCF,EAAArB,UAAAwB,cAAA,SAAcpB,GACnB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,aAAcA,IAC9DsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAV/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAIAlC;;;;;;;;;;;;;;;;;;;;;;;ACMR,IAAAmC,EAAA,WAEE,SAAAA,EAAoBR,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvCO,EAAA9B,UAAA+B,UAAA,SAAUjB,EAAuBV,GACtC,YADe,IAAAU,IAAAA,EAAA,MACRlB,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,UAAYU,EAAQV,IACpEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAV/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAAqC,EAAA,WAEE,SAAAA,EAAoBV,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvCS,EAAAhC,UAAAiC,cAAA,SAAc7B,GACnB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,aAAcA,IAC9DsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAV/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAAuC,EAAA,WAQE,SAAAA,EAAoBZ,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,EANtC3B,KAAAuC,YAAc,CACpBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,6BAQbJ,EAAAlC,UAAAuC,MAAA,SAAMC,EAAapC,GACxB,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,cAAeA,GAAQ,CAAEoC,IAAGA,GAAI5C,KAAKuC,aACtFT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqD,EAAAlC,UAAA0C,SAAA,SAASC,EAAyBvC,GACvC,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,YAAaA,GAAQ,CAAEuC,WAAUA,GAAI/C,KAAKuC,aAC3FT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqD,EAAAlC,UAAA4C,QAAA,SAAQC,EAAYzC,GACzB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,SAAWyC,EAAIzC,IAC/DsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAMtBqD,EAAAlC,UAAA8C,YAAA,SAAYD,EAAYnD,EAAkDU,GAC/E,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,SAAWyC,EAAK,gBAAiBzC,GAAQV,EAAME,KAAKuC,aACrGT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqD,EAAAlC,UAAA+C,eAAA,SAAeF,EAAYnD,EAAkDU,GAClF,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,SAAWyC,EAAK,aAAenD,EAAKH,KAAO,UAAWa,GAAQV,EAAME,KAAKuC,aAC1HT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqD,EAAAlC,UAAAgD,eAAA,SAAeH,EAAYnD,GAChC,OAAOE,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,SAAWyC,EAAK,aAAenD,EAAKH,KAAO,qBAAuBG,EAAKkB,YACvHc,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBA9D/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAAsD,EAAA,WAQE,SAAAA,EAAoB3B,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,EANtC3B,KAAAuC,YAAc,CACpBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,6BAQbW,EAAAjD,UAAAkD,SAAA,SAAS3D,EAAca,GAC5B,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,qBAAsBA,GAAQ,CAACb,KAAIA,GAAGK,KAAKuC,aAC5FT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAAmD,aAAA,SAAa/C,GAClB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAaA,IAC7DsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAAoD,WAAA,SAAWP,EAAYzC,GAC5B,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,aAAeyC,EAAIzC,IACnEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAAqD,SAAA,SAASR,EAAYzC,EAAeE,GACzC,OAAOV,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,aAAeyC,EAAK,SAAUzC,EAAOE,IACrFoB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAAsD,WAAA,SAAW5C,EAAkBN,GAClC,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,gBAAiBA,GAAQM,EAASd,KAAKuC,aACxFT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAAuD,cAAA,SAAc7C,EAAkBN,GACrC,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,aAAeM,EAAQmC,GAAK,UAAWzC,GAAQM,EAASd,KAAKuC,aAC9GT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAAwD,cAAA,SAAcX,GACnB,OAAOjD,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,aAAeyC,EAAK,YACpEnB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAAyD,eAAA,SAAeZ,EAAYnD,EAAoCU,GACpE,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,aAAeyC,EAAK,gBAAiBzC,GAAQV,EAAME,KAAKuC,aACzGT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAA0D,kBAAA,SAAkBb,EAAYnD,EAAoCU,GACvE,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,aAAeyC,EAAK,aAAenD,EAAKH,KAAO,UAAWa,GAAQV,EAAME,KAAKuC,aAC9HT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBoE,EAAAjD,UAAA2D,kBAAA,SAAkBd,EAAYnD,GACnC,OAAOE,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,aAAeyC,EAAK,aAAenD,EAAKH,KAAO,YAC/FmC,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAjG/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAAiE,EAAA,WAQE,SAAAA,EAAoBtC,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,EANtC3B,KAAAuC,YAAc,CACpBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,6BAQbsB,EAAA5D,UAAAkD,SAAA,SAASL,EAAYtD,EAAca,GACxC,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,oBAAqBA,GAAQ,CAACyC,GAAEA,EAAEtD,KAAIA,GAAGK,KAAKuC,aAC/FT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAA6D,YAAA,SAAYzD,GACjB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,WAAYA,IAC5DsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAA8D,WAAA,SAAWjB,EAAYzC,GAC5B,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAIzC,IAClEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAA+D,gBAAA,SAAgBlB,EAAYzC,EAAeE,GAChD,OAAOV,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAK,SAAUzC,EAAOE,IACpFoB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAgE,oBAAA,SAAoBnB,EAAYzC,GACrC,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAK,aAAczC,IACjFsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAiE,kBAAA,SAAkBpB,EAAYnC,EAAiBN,GACpD,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAK,cAAgBnC,EAASN,IAC5FsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAkE,WAAA,SAAWC,EAAkB/D,GAClC,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,eAAgBA,GAAQ+D,EAASvE,KAAKuC,aACvFT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAoE,cAAA,SAAcD,EAAkB/D,GACrC,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,YAAc+D,EAAQtB,GAAK,UAAWzC,GAAQ+D,EAASvE,KAAKuC,aAC7GT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAqE,cAAA,SAAcxB,GACnB,OAAOjD,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAK,YACnEnB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAsE,eAAA,SAAezB,EAAYnD,EAAoCU,GACpE,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAK,gBAAiBzC,GAAQV,EAAME,KAAKuC,aACxGT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAuE,kBAAA,SAAkB1B,EAAYnD,EAAoCU,GACvE,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAK,aAAenD,EAAKH,KAAO,UAAWa,GAAQV,EAAME,KAAKuC,aAC7HT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+E,EAAA5D,UAAAwE,kBAAA,SAAkB3B,EAAYnD,GACnC,OAAOE,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAcyC,EAAK,aAAenD,EAAKH,KAAO,YAC9FmC,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAnH/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAA8E,EAAA,WAEE,SAAAA,EAAoBnD,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvCkD,EAAAzE,UAAA0E,aAAA,WACL,OAAO9E,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcoD,UAAY,mBACtDjD,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAV/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAAiF,EAAA,WAEE,SAAAA,EAAoBtD,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvCqD,EAAA5E,UAAA6E,aAAA,WACL,OAAOjF,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,cAChDsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB+F,EAAA5E,UAAA8E,YAAA,SAAYjC,GACjB,OAAOjD,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,aAAeyC,IAC/DnB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAnB/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAAoF,EAAA,WAQE,SAAAA,EAAoBzD,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,EANtC3B,KAAAuC,YAAc,CACpBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,6BAQbyC,EAAA/E,UAAAgF,YAAA,SAAY5E,GACjB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,WAAYA,IAC5DsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBkG,EAAA/E,UAAAiF,WAAA,SAAW1F,EAAca,GAC9B,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,YAAcb,EAAMa,IACpEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBkG,EAAA/E,UAAAkF,cAAA,SAAcC,EAAkB/E,GACrC,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,YAAcb,KAAO,UAAWa,GAAQ+E,EAASvF,KAAKuC,aACvGT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBkG,EAAA/E,UAAAoF,YAAA,SAAYhF,GACjB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,oBAAqBA,IACrEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBA3C/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAIAlC;;;;;;;;;;;;;;;;;;;;;;;ACMR,IAAA0F,EAAA,WAEE,SAAAA,EAAoB/D,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvC8D,EAAArF,UAAAsF,gBAAA,SAAgBlF,GACrB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,eAAgBA,IAChEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAV/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBACAlC;;;;;;;;;;;;;;;;;;;;;;;ACSR,IAAA4F,EAAA,WAEE,SAAAA,EAAoBjE,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvCgE,EAAAvF,UAAAwF,WAAA,SAAWpF,GAChB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,iBAAkBA,IAClEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtB0G,EAAAvF,UAAAyF,WAAA,SAAWrF,GAChB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,iBAAkBA,IAClEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAnB/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAIAlC;;;;;;;;;;;;;;;;;;;;;;;ACKR,IAAA+F,EAAA,WAEE,SAAAA,EAAoBpE,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,SAIvCmE,EAAA1F,UAAA2F,OAAA,SAAOC,GAEZ,IAAMC,EAAa,IAAIC,SAIvB,OAFAD,EAAWE,OAAO,OAAQH,GAEnBhG,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,UAAWyF,EAAY,CACzEG,gBAAgB,EAChBC,QAAS,WACRvE,KACDC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBAjB7B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPNS,EAAAA,kBAGAlC;;;;;;;;;;;;;;;;;;;;;;;ACOR,IAAAuG,EAAA,WAQE,SAAAA,EAAoB5E,EAA0BC,GAA1B3B,KAAA0B,KAAAA,EAA0B1B,KAAA2B,cAAAA,EANtC3B,KAAAuC,YAAc,CACpBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,6BAQb4D,EAAAlG,UAAAmG,cAAA,SAAc/F,GACnB,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,WAAYA,IAC5DsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqH,EAAAlG,UAAAoG,SAAA,SAAShG,GACd,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,QAASA,IACzDsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqH,EAAAlG,UAAAqG,QAAA,SAAQC,EAAkBlG,GAC/B,OAAOR,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,SAAWkG,EAAUlG,IACrEsB,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqH,EAAAlG,UAAAuG,WAAA,SAAWD,GAChB,OAAO1G,KAAK0B,KAAKG,IAAS7B,KAAK2B,cAAcnB,MAAM,SAAWkG,EAAW,YACtE5E,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,eAKtBqH,EAAAlG,UAAAwG,WAAA,SAAWC,EAAYrG,GAC5B,OAAOR,KAAK0B,KAAKmB,KAAU7C,KAAK2B,cAAcnB,MAAM,SAAWqG,EAAKH,SAAW,UAAWlG,GAAQqG,EAAM7G,KAAKuC,aAC1GT,KACCC,EAAAA,MAAM,GACNC,EAAAA,WAAWhD,EAAYC,iBApD/B,0JAHCqC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARNS,EAAAA,kBAGAlC","sourcesContent":["/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum EventStatus {\r\n  pending = 'pending',\r\n  running = 'running',\r\n  done = 'done'\r\n}\r\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum ItemType {\r\n  text = 'text',\r\n  audio = 'audio',\r\n  video = 'video',\r\n  picture = 'picture'\r\n}\r\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum RoleType {\n  admin = 'admin',\n  author = 'author'\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum ScenarioType {\n  project = 'project',\n  library = 'library'\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {throwError} from 'rxjs';\n\nexport class ErrorHelper {\n\n  public static handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Meta, Metable} from '../models';\n\nexport class MetaHelper {\n\n  public static getMeta(object: Metable, name: string): Meta {\n    return object.metadata.find((meta) => {\n      return meta.name === name;\n    });\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {Pagination, Query} from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n  private server: string;\n  private version: number;\n  private initialized: boolean;\n\n  constructor() {\n    // default values\n    this.server = 'http://api.narra';\n    this.version = 1;\n    this.initialized = false;\n  }\n\n  //\n  // initialize\n  //\n  public initialize(server?: string, version?: number): void {\n    // set server if provided\n    if (server) {\n      this.server = server;\n    }\n    // set version if provided\n    if (version) {\n      this.version = version;\n    }\n    // set init flag\n    this.initialized = true;\n  }\n\n  //\n  // getters\n  //\n  public get apiServer(): string {\n    return this.server;\n  }\n\n  public get apiVersion(): number {\n    return this.version;\n  }\n\n  public get isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  //\n  // public methods\n  //\n  public query(path: string, query?: Query, pagination?: Pagination): string {\n    // prepare params\n    let params = path;\n    // check for query\n    if (query) {\n      // prepare query param string\n      params += '?';\n      // prepare libraries selector\n      if (query.libraries) {\n        query.libraries.forEach((library: string) => {\n          params += `libraries[]=${library}&`;\n        });\n      }\n      // prepare generators selector\n      if (query.generators) {\n        query.generators.forEach((generator: string) => {\n          params += `generators[]=${generator}&`;\n        });\n      }\n      // prepare generators selector\n      if (query.filters) {\n        query.filters.forEach((filter: string) => {\n          params += `filters[]=${filter}&`;\n        });\n      }\n    }\n    // check for pagination\n    if (pagination) {\n      // prepare query param string if not query\n      if (!query) {\n        params += '?';\n      }\n      // add pagination parameters\n      params += `page=${pagination.page}&per_page=${pagination.perPage}&offset=${pagination.offset}`;\n    }\n    return this.server + '/v' + this.version + '/' + params;\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {Connector, Query, Response} from '../models';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET connectors '/v1/connectors'\n  public getConnectors(query?: Query): Observable<Response<Connector[], 'connectors'>> {\n    return this.http.get<any>(this.serverService.query('connectors', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Event, Query, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET events by default '/v1/events/me' possibly can be modified to admin's all '/v1/events'\n  public getEvents(filter: string = 'me', query?: Query): Observable<Response<Event[], 'events'>> {\n    return this.http.get<any>(this.serverService.query('events/' + filter, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Generator, Query, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneratorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET generators '/v1/generators'\n  public getGenerators(query?: Query): Observable<Response<Generator[], 'generators'>> {\n    return this.http.get<any>(this.serverService.query('generators', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {catchError, map, mergeMap, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Candidate, Item, Library, Meta, Proxy, Query, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST check url '/v1/items/check'\n  public check(url: string, query?: Query): Observable<Response<Proxy[], 'proxies'>> {\n    return this.http.post<any>(this.serverService.query('items/check', query), { url }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new item '/v1/items/new'\n  public addItems(candidates: Candidate[], query?: Query): Observable<Response<string[], 'ids'>> {\n    return this.http.post<any>(this.serverService.query('items/new', query), { candidates }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET item '/v1/items/{id}'\n  public getItem(id: string, query?: Query): Observable<Response<Item, 'item'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n\n  // POST new item metadata '/v1/items/{name}/metadata/new'\n  public addItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, query?: Query): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/new', query), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update item metadata '/v1/items/{name}/metadata/{meta}/update'\n  public updateItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, query?: Query): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/update', query), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete item metadata '/v1/items/{name}/metadata/{meta}/delete'\n  public deleteItemMeta(id: string, meta: Pick<Meta, 'name' | 'generator'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/delete?generator=' + meta.generator))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Query, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibraryService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/libraries/validate'\n  public validate(name: string, query?: Query): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('libraries/validate', query), {name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET libraries '/v1/libraries'\n  public getLibraries(query?: Query): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('libraries', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library '/v1/libraries/{id}'\n  public getLibrary(id: string, query?: Query): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library items '/v1/libraries/{id}/items'\n  public getItems(id: string, query?: Query, pagination?: Pagination): Observable<Response<Item[], 'items'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/items', query, pagination))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library '/v1/libraries/new'\n  public addLibrary(library: Library, query?: Query): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/new', query), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library '/v1/libraries/{id}/update'\n  public updateLibrary(library: Library, query?: Query): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + library.id + '/update', query), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library '/v1/libraries/{id}/delete'\n  public deleteLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library metadata '/v1/libraries/{name}/metadata/new'\n  public addLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, query?: Query): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/new', query), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library metadata '/v1/libraries/{name}/metadata/{meta}/update'\n  public updateLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, query?: Query): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/update', query), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library metadata '/v1/libraries/{name}/metadata/{meta}/delete'\n  public deleteLibraryMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Query, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/projects/validate'\n  public validate(id: string, name: string, query?: Query): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('projects/validate', query), {id, name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET projects '/v1/projects'\n  public getProjects(query?: Query): Observable<Response<Project[], 'projects'>> {\n    return this.http.get<any>(this.serverService.query('projects', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project '/v1/projects/{name}'\n  public getProject(id: string, query?: Query): Observable<Response<Project, 'project'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's items '/v1/projects/{id}/items'\n  public getProjectItems(id: string, query?: Query, pagination?: Pagination): Observable<Response<Item[], 'items'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/items', query, pagination))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's libraries '/v1/projects/{id}/libraries'\n  public getProjectLibraries(id: string, query?: Query): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's library '/v1/projects/{id}/libraries/{library}'\n  public getProjectLibrary(id: string, library: string, query?: Query): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries/' + library, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project '/v1/projects/new'\n  public addProject(project: Project, query?: Query): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/new', query), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project '/v1/projects/{name}/update'\n  public updateProject(project: Project, query?: Query): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + project.id + '/update', query), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project '/v1/projects/{name}/delete'\n  public deleteProject(id: string): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project metadata '/v1/projects/{name}/metadata/new'\n  public addProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, query?: Query): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/new', query), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project metadata '/v1/projects/{name}/metadata/{meta}/update'\n  public updateProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, query?: Query): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/update', query), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project metadata '/v1/projects/{name}/metadata/{meta}/delete'\n  public deleteProjectMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Provider, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProviderService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET authentication providers '/auth/providers'\n  public getProviders(): Observable<Response<Provider[], 'providers'>> {\n    return this.http.get<any>(this.serverService.apiServer + '/auth/providers')\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Response, Scenario} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET scenarios '/v1/scenarios'\n  public getScenarios(): Observable<Response<Scenario[], 'scenarios'>> {\n    return this.http.get<any>(this.serverService.query('scenarios'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET scenario '/v1/scenarios/{id}'\n  public getScenario(id: string): Observable<Response<Scenario, 'scenario'>> {\n    return this.http.get<any>(this.serverService.query('scenarios/' + id))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Query, Response, Setting} from '../models';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET settings '/v1/settings'\n  public getSettings(query?: Query): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET setting '/v1/settings/{name}'\n  public getSetting(name: string, query?: Query): Observable<Response<Setting, 'setting'>> {\n    return this.http.get<any>(this.serverService.query('settings/' + name, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update setting '/v1/settings/{name}/update'\n  public updateSetting(setting: Setting, query?: Query): Observable<Response<Setting, 'setting'>> {\n    return this.http.post<any>(this.serverService.query('settings/' + name + '/update', query), setting, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET settings default values '/v1/settings/defaults'\n  public getDefaults(query?: Query): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings/defaults', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ServerService} from './server.service';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Query, Response, Synthesizer} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SynthesizerService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET synthesizers '/v1/synthesizers'\n  public getSynthesizers(query?: Query): Observable<Response<Synthesizer[], 'synthesizers'>> {\n    return this.http.get<any>(this.serverService.query('synthesizers', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Module, Query, Response} from '../models';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET users '/v1/system/version'\n  public getVersion(query?: Query): Observable<Response<string, 'version'>> {\n    return this.http.get<any>(this.serverService.query('system/version', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/system/modules'\n  public getModules(query?: Query): Observable<Response<Module[], 'modules'>> {\n    return this.http.get<any>(this.serverService.query('system/modules', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST upload '/v1/upload'\n  public upload(file: File): Observable<any> {\n    // prepare data\n    const uploadData = new FormData();\n    // set file\n    uploadData.append('file', file);\n    // upload\n    return this.http.post<any>(this.serverService.query('upload'), uploadData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(\n      retry(1),\n      catchError(ErrorHelper.handleError)\n    );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Query, Response, User} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET logged user '/v1/users/me'\n  public getLoggedUser(query?: Query): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/me', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/users'\n  public getUsers(query?: Query): Observable<Response<User[], 'users'>> {\n    return this.http.get<any>(this.serverService.query('users', query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET user '/v1/users/{username}'\n  public getUser(username: string, query?: Query): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete user '/v1/users/{username}/delete'\n  public deleteUser(username: string): Observable<Response<string, 'username'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update user '/v1/users/{username}/update'\n  public updateUser(user: User, query?: Query): Observable<Response<User, 'user'>> {\n    return this.http.post<any>(this.serverService.query('users/' + user.username + '/update', query), user, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n"]}