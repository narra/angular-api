{"version":3,"sources":["../projects/api/src/lib/enums/event-status.enum.ts","../projects/api/src/lib/enums/item-type.enum.ts","../projects/api/src/lib/enums/role-type.enum.ts","../projects/api/src/lib/enums/scenario-type.enum.ts","../projects/api/src/lib/helpers/error.helper.ts","../projects/api/src/lib/helpers/meta.helper.ts","../projects/api/src/lib/services/server.service.ts","../projects/api/src/lib/services/connector.service.ts","../projects/api/src/lib/services/event.service.ts","../projects/api/src/lib/services/generator.service.ts","../projects/api/src/lib/services/item.service.ts","../projects/api/src/lib/services/library.service.ts","../projects/api/src/lib/services/project.service.ts","../projects/api/src/lib/services/provider.service.ts","../projects/api/src/lib/services/scenario.service.ts","../projects/api/src/lib/services/setting.service.ts","../projects/api/src/lib/services/synthesizer.service.ts","../projects/api/src/lib/services/system.service.ts","../projects/api/src/lib/services/upload.service.ts","../projects/api/src/lib/services/user.service.ts"],"names":["EventStatus","ItemType","RoleType","ScenarioType","ErrorHelper","handleError","error","ErrorEvent","console","message","status","throwError","MetaHelper","getMeta","object","name","metadata","find","meta","ServerService","this","server","version","Object","defineProperty","prototype","query","path","Injectable","args","providedIn","ConnectorService","http","serverService","getConnectors","get","pipe","retry","catchError","HttpClient","EventService","getEvents","filter","GeneratorService","getGenerators","ItemService","httpOptions","headers","HttpHeaders","Content-Type","check","url","post","addItems","candidates","getItem","id","addItemMeta","updateItemMeta","deleteItemMeta","generator","LibraryService","validate","getLibraries","getLibrary","getItems","addLibrary","library","updateLibrary","deleteLibrary","addLibraryMeta","updateLibraryMeta","deleteLibraryMeta","ProjectService","title","getProjects","getProject","addProject","project","updateProject","deleteProject","addProjectMeta","updateProjectMeta","deleteProjectMeta","ProviderService","getProviders","apiServer","ScenarioService","getScenarios","getScenario","SettingService","getSettings","getSetting","updateSetting","setting","getDefaults","SynthesizerService","getSynthesizers","SystemService","getVersion","getModules","UploadService","upload","file","uploadData","FormData","append","reportProgress","observe","UserService","getLoggedUser","getUsers","getUser","username","deleteUser","updateUser","user"],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum EventStatus {\r\n  pending = 'pending',\r\n  running = 'running',\r\n  done = 'done'\r\n}\r\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum ItemType {\r\n  text = 'text',\r\n  audio = 'audio',\r\n  video = 'video',\r\n  picture = 'picture'\r\n}\r\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum RoleType {\n  admin = 'admin',\n  author = 'author'\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum ScenarioType {\n  project = 'project',\n  library = 'library'\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {throwError} from 'rxjs';\n\nexport class ErrorHelper {\n\n  public static handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Meta, Metable} from '../models';\n\nexport class MetaHelper {\n\n  public static getMeta(object: Metable, name: string): Meta {\n    return object.metadata.find((meta) => {\n      return meta.name === name;\n    });\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n  private server: string;\n  readonly version: number;\n\n\n  constructor() {\n    // default values\n    this.server = 'http://api.narra';\n    this.version = 1;\n  }\n\n  //\n  // setters\n  //\n  public set apiServer(server: string) {\n    this.server = server;\n  }\n\n  //\n  // getters\n  //\n  public get apiServer(): string {\n    return this.server;\n  }\n\n  //\n  // public methods\n  //\n  public query(path: string): string {\n    return this.server + '/v' + this.version + '/' + path;\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {Connector, Response} from '../models';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET connectors '/v1/connectors'\n  public getConnectors(): Observable<Response<Connector[], 'connectors'>> {\n    return this.http.get<any>(this.serverService.query('connectors'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Event, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET events by default '/v1/events/me' possibly can be modified to admin's all '/v1/events'\n  public getEvents(filter: string = 'me'): Observable<Response<Event[], 'events'>> {\n    return this.http.get<any>(this.serverService.query('events/' + filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Generator, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneratorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET generators '/v1/generators'\n  public getGenerators(): Observable<Response<Generator[], 'generators'>> {\n    return this.http.get<any>(this.serverService.query('generators'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {catchError, map, mergeMap, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Candidate, Item, Library, Meta, Proxy, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST check url '/v1/items/check'\n  public check(url: string): Observable<Response<Proxy[], 'proxies'>> {\n    return this.http.post<any>(this.serverService.query('items/check'), { url }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new item '/v1/items/new'\n  public addItems(candidates: Candidate[]): Observable<Response<string[], 'ids'>> {\n    return this.http.post<any>(this.serverService.query('items/new'), { candidates }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET item '/v1/items/{id}'\n  public getItem(id: string): Observable<Response<Item, 'item'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n\n  // POST new item metadata '/v1/items/{name}/metadata/new'\n  public addItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/new'), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update item metadata '/v1/items/{name}/metadata/{meta}/update'\n  public updateItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/update'), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete item metadata '/v1/items/{name}/metadata/{meta}/delete'\n  public deleteItemMeta(id: string, meta: Pick<Meta, 'name' | 'generator'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/delete?generator=' + meta.generator))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Project, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibraryService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/libraries/validate'\n  public validate(name: string): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('libraries/validate'), {name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET libraries '/v1/libraries'\n  public getLibraries(): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('libraries'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library '/v1/libraries/{id}'\n  public getLibrary(id: string): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library items '/v1/libraries/{id}/items'\n  public getItems(id: string): Observable<Response<Item[], 'items'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/items'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library '/v1/libraries/new'\n  public addLibrary(library: Library): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/new'), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library '/v1/libraries/{id}/update'\n  public updateLibrary(library: Library): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + library.id + '/update'), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library '/v1/libraries/{id}/delete'\n  public deleteLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library metadata '/v1/libraries/{name}/metadata/new'\n  public addLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/new'), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library metadata '/v1/libraries/{name}/metadata/{meta}/update'\n  public updateLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/update'), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library metadata '/v1/libraries/{name}/metadata/{meta}/delete'\n  public deleteLibraryMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Meta, Project, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/projects/validate'\n  public validate(name: string, title: string): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('projects/validate'), {name, title}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET projects '/v1/projects'\n  public getProjects(): Observable<Response<Project[], 'projects'>> {\n    return this.http.get<any>(this.serverService.query('projects'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project '/v1/projects/{name}'\n  public getProject(name: string): Observable<Response<Project, 'project'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + name))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project '/v1/projects/new'\n  public addProject(project: Project): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/new'), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project '/v1/projects/{name}/update'\n  public updateProject(project: Project): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + project.name + '/update'), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project '/v1/projects/{name}/delete'\n  public deleteProject(name: string): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project metadata '/v1/projects/{name}/metadata/new'\n  public addProjectMeta(name: string, meta: Pick<Meta, 'name' | 'value'>): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + name + '/metadata/new'), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project metadata '/v1/projects/{name}/metadata/{meta}/update'\n  public updateProjectMeta(name: string, meta: Pick<Meta, 'name' | 'value'>): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + name + '/metadata/' + meta.name + '/update'), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project metadata '/v1/projects/{name}/metadata/{meta}/delete'\n  public deleteProjectMeta(name: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + name + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, map, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Provider, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProviderService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET authentication providers '/auth/providers'\n  public getProviders(): Observable<Response<Provider[], 'providers'>> {\n    return this.http.get<any>(this.serverService.apiServer + '/auth/providers')\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Response, Scenario} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET scenarios '/v1/scenarios'\n  public getScenarios(): Observable<Response<Scenario[], 'scenarios'>> {\n    return this.http.get<any>(this.serverService.query('scenarios'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET scenario '/v1/scenarios/{id}'\n  public getScenario(id: string): Observable<Response<Scenario, 'scenario'>> {\n    return this.http.get<any>(this.serverService.query('scenarios/' + id))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Response, Setting} from '../models';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET settings '/v1/settings'\n  public getSettings(): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET setting '/v1/settings/{name}'\n  public getSetting(name: string): Observable<Response<Setting, 'setting'>> {\n    return this.http.get<any>(this.serverService.query('settings/' + name))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update setting '/v1/settings/{name}/update'\n  public updateSetting(setting: Setting): Observable<Response<Setting, 'setting'>> {\n    return this.http.post<any>(this.serverService.query('settings/' + name + '/update'), setting, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET settings default values '/v1/settings/defaults'\n  public getDefaults(): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings/defaults'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ServerService} from './server.service';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Response, Synthesizer} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SynthesizerService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET synthesizers '/v1/synthesizers'\n  public getSynthesizers(): Observable<Response<Synthesizer[], 'synthesizers'>> {\n    return this.http.get<any>(this.serverService.query('synthesizers'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Module, Response} from '../models';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET users '/v1/system/version'\n  public getVersion(): Observable<Response<string, 'version'>> {\n    return this.http.get<any>(this.serverService.query('system/version'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/system/modules'\n  public getModules(): Observable<Response<Module[], 'modules'>> {\n    return this.http.get<any>(this.serverService.query('system/modules'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST upload '/v1/upload'\n  public upload(file: File): Observable<any> {\n    // prepare data\n    const uploadData = new FormData();\n    // set file\n    uploadData.append('file', file);\n    // upload\n    return this.http.post<any>(this.serverService.query('upload'), uploadData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(\n      retry(1),\n      catchError(ErrorHelper.handleError)\n    );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Response, User} from '../models';\nimport {ErrorHelper} from '../helpers';\nimport {RoleType} from \"../enums\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET logged user '/v1/users/me'\n  public getLoggedUser(): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/me'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/users'\n  public getUsers(): Observable<Response<User[], 'users'>> {\n    return this.http.get<any>(this.serverService.query('users'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET user '/v1/users/{username}'\n  public getUser(username: string): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete user '/v1/users/{username}/delete'\n  public deleteUser(username: string): Observable<Response<string, 'username'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update user '/v1/users/{username}/update'\n  public updateUser(user: User): Observable<Response<User, 'user'>> {\n    return this.http.post<any>(this.serverService.query('users/' + user.username + '/update'), user, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n"]}