{"version":3,"sources":["../projects/api/src/lib/enums/event-status.enum.ts","../projects/api/src/lib/enums/item-type.enum.ts","../projects/api/src/lib/enums/query-operator.enum.ts","../projects/api/src/lib/enums/role-type.enum.ts","../projects/api/src/lib/enums/scenario-type.enum.ts","../projects/api/src/lib/helpers/error.helper.ts","../projects/api/src/lib/helpers/meta.helper.ts","../projects/api/src/lib/services/server.service.ts","../projects/api/src/lib/services/connector.service.ts","../projects/api/src/lib/services/event.service.ts","../projects/api/src/lib/services/generator.service.ts","../projects/api/src/lib/services/item.service.ts","../projects/api/src/lib/services/library.service.ts","../projects/api/src/lib/services/project.service.ts","../projects/api/src/lib/services/provider.service.ts","../projects/api/src/lib/services/scenario.service.ts","../projects/api/src/lib/services/setting.service.ts","../projects/api/src/lib/services/synthesizer.service.ts","../projects/api/src/lib/services/system.service.ts","../projects/api/src/lib/services/upload.service.ts","../projects/api/src/lib/services/user.service.ts"],"names":["EventStatus","ItemType","QueryOperator","RoleType","ScenarioType","ErrorHelper","handleError","error","ErrorEvent","console","message","status","throwError","MetaHelper","getMeta","object","name","metadata","find","meta","ServerService","this","server","version","initialized","prototype","initialize","Object","defineProperty","query","path","filter","pagination","selectors","params","filters","forEach","f","selector","content","value","queryOperator","queryFields","field","page","perPage","offset","Injectable","args","providedIn","ConnectorService","http","serverService","getConnectors","get","pipe","retry","catchError","HttpClient","EventService","getEvents","selection","GeneratorService","getGenerators","ItemService","httpOptions","headers","HttpHeaders","Content-Type","check","url","post","addItems","candidates","getItem","id","addItemMeta","updateItemMeta","deleteItemMeta","generator","LibraryService","validate","getLibraries","getLibrary","getItems","deleteItems","items","addLibrary","library","updateLibrary","cleanLibrary","deleteLibrary","addLibraryMeta","updateLibraryMeta","deleteLibraryMeta","ProjectService","getProjects","getProject","getProjectItems","libraries","push","getProjectLibraries","getProjectLibrary","addProject","project","updateProject","deleteProject","addProjectMeta","updateProjectMeta","deleteProjectMeta","ProviderService","getProviders","apiServer","ScenarioService","getScenarios","getScenario","SettingService","getSettings","getSetting","updateSetting","setting","getDefaults","SynthesizerService","getSynthesizers","SystemService","getVersion","getModules","UploadService","upload","file","uploadData","FormData","append","reportProgress","observe","UserService","getLoggedUser","getUsers","getUser","username","deleteUser","updateUser","user"],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum EventStatus {\r\n  pending = 'pending',\r\n  running = 'running',\r\n  done = 'done'\r\n}\r\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum ItemType {\r\n  text = 'text',\r\n  audio = 'audio',\r\n  video = 'video',\r\n  picture = 'picture'\r\n}\r\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum QueryOperator {\r\n  or = 'or',\r\n  and = 'and'\r\n}\r\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum RoleType {\n  admin = 'admin',\n  author = 'author'\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum ScenarioType {\n  project = 'project',\n  library = 'library'\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {throwError} from 'rxjs';\n\nexport class ErrorHelper {\n\n  public static handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Meta, Metable} from '../models';\n\nexport class MetaHelper {\n\n  public static getMeta(object: Metable, name: string): Meta {\n    return object.metadata.find((meta) => {\n      return meta.name === name;\n    });\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {Pagination, Filter, Selector, Query} from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n  private server: string;\n  private version: number;\n  private initialized: boolean;\n\n  constructor() {\n    // default values\n    this.server = 'http://api.narra';\n    this.version = 1;\n    this.initialized = false;\n  }\n\n  //\n  // initialize\n  //\n  public initialize(server?: string, version?: number): void {\n    // set server if provided\n    if (server) {\n      this.server = server;\n    }\n    // set version if provided\n    if (version) {\n      this.version = version;\n    }\n    // set init flag\n    this.initialized = true;\n  }\n\n  //\n  // getters\n  //\n  public get apiServer(): string {\n    return this.server;\n  }\n\n  public get apiVersion(): number {\n    return this.version;\n  }\n\n  public get isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  //\n  // public methods\n  //\n  public query(path: string, filter?: Filter, pagination?: Pagination, query?: Query, selectors?: Selector[]): string {\n    // prepare params\n    let params = `${path}?`;\n    // filters\n    if (filter) {\n      filter.filters.forEach((f: string) => {\n        params += `filters[]=${f}&`;\n      });\n    }\n    // selectors\n    if (selectors) {\n      selectors.forEach((selector) => {\n        selector.content.forEach((value) => {\n          params += `${selector.name}[]=${value}&`;\n        });\n      });\n    }\n    // query\n    if (query) {\n      // add query fields\n      params += `query=${query.query}&`;\n      // add operator\n      if (query.queryOperator) {\n        params += `query_operator=${query.queryOperator}&`;\n      }\n      // add fields\n      if (query.queryFields) {\n        query.queryFields.forEach((field) => {\n          params += `query_fields[]=${field}&`;\n        });\n      }\n    }\n    // pagination\n    if (pagination) {\n      // add pagination parameters\n      params += `page=${pagination.page}&per_page=${pagination.perPage}&offset=${pagination.offset}`;\n    }\n    // check for pagination\n    return this.server + '/v' + this.version + '/' + params;\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Connector, Filter, Response} from '../models';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET connectors '/v1/connectors'\n  public getConnectors(filter?: Filter): Observable<Response<Connector[], 'connectors'>> {\n    return this.http.get<any>(this.serverService.query('connectors', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Event, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET events by default '/v1/events/me' possibly can be modified to admin's all '/v1/events'\n  public getEvents(selection: string = 'me', filter?: Filter): Observable<Response<Event[], 'events'>> {\n    return this.http.get<any>(this.serverService.query('events/' + selection, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Generator, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneratorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET generators '/v1/generators'\n  public getGenerators(filter?: Filter): Observable<Response<Generator[], 'generators'>> {\n    return this.http.get<any>(this.serverService.query('generators', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {catchError, map, mergeMap, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Candidate, Item, Library, Meta, Proxy, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST check url '/v1/items/check'\n  public check(url: string, filter?: Filter): Observable<Response<Proxy[], 'proxies'>> {\n    return this.http.post<any>(this.serverService.query('items/check', filter), { url }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new item '/v1/items/new'\n  public addItems(candidates: Candidate[], filter?: Filter): Observable<Response<string[], 'events'>> {\n    return this.http.post<any>(this.serverService.query('items/new', filter), { candidates }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET item '/v1/items/{id}'\n  public getItem(id: string, filter?: Filter): Observable<Response<Item, 'item'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n\n  // POST new item metadata '/v1/items/{name}/metadata/new'\n  public addItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update item metadata '/v1/items/{name}/metadata/{meta}/update'\n  public updateItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete item metadata '/v1/items/{name}/metadata/{meta}/delete'\n  public deleteItemMeta(id: string, meta: Pick<Meta, 'name' | 'generator'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/delete?generator=' + meta.generator))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Filter, Response, Query} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibraryService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/libraries/validate'\n  public validate(name: string, filter?: Filter): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('libraries/validate', filter), {name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET libraries '/v1/libraries'\n  public getLibraries(filter?: Filter): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('libraries', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library '/v1/libraries/{id}'\n  public getLibrary(id: string, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library items '/v1/libraries/{id}/items'\n  public getItems(id: string, filter?: Filter, pagination?: Pagination, query?: Query): Observable<Response<Item[], 'items'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/items', filter, pagination, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST delete library items '/v1/libraries/{id}/items/delete'\n  public deleteItems(id: string, items: string[]): Observable<Response<string[], 'ids'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/items/delete'), items, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library '/v1/libraries/new'\n  public addLibrary(library: Library, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/new', filter), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library '/v1/libraries/{id}/update'\n  public updateLibrary(library: Library, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + library.id + '/update', filter), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET clean library '/v1/libraries/{id}/clean'\n  public cleanLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/clean'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library '/v1/libraries/{id}/delete'\n  public deleteLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library metadata '/v1/libraries/{name}/metadata/new'\n  public addLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library metadata '/v1/libraries/{name}/metadata/{meta}/update'\n  public updateLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library metadata '/v1/libraries/{name}/metadata/{meta}/delete'\n  public deleteLibraryMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Filter, Response, Query} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/projects/validate'\n  public validate(id: string, name: string, filter?: Filter): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('projects/validate', filter), {id, name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET projects '/v1/projects'\n  public getProjects(filter?: Filter): Observable<Response<Project[], 'projects'>> {\n    return this.http.get<any>(this.serverService.query('projects', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project '/v1/projects/{name}'\n  public getProject(id: string, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's items '/v1/projects/{id}/items'\n  // default libraries selector: all\n  // default meta selector: none\n  public getProjectItems(id: string, libraries?: string[], meta?: string[], query?: Query, filter?: Filter, pagination?: Pagination): Observable<Response<Item[], 'items'>> {\n    // prepare selectors\n    const selectors = [];\n    // libraries selector\n    if (libraries) {\n      selectors.push({name: 'libraries', content: libraries});\n    }\n    // meta selector\n    if (meta) {\n      selectors.push({name: 'meta', content: meta});\n    }\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/items', filter, pagination, query, selectors))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's libraries '/v1/projects/{id}/libraries'\n  public getProjectLibraries(id: string, filter?: Filter): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's library '/v1/projects/{id}/libraries/{library}'\n  public getProjectLibrary(id: string, library: string, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries/' + library, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project '/v1/projects/new'\n  public addProject(project: Project, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/new', filter), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project '/v1/projects/{name}/update'\n  public updateProject(project: Project, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + project.id + '/update', filter), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project '/v1/projects/{name}/delete'\n  public deleteProject(id: string): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project metadata '/v1/projects/{name}/metadata/new'\n  public addProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project metadata '/v1/projects/{name}/metadata/{meta}/update'\n  public updateProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project metadata '/v1/projects/{name}/metadata/{meta}/delete'\n  public deleteProjectMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Provider, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProviderService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET authentication providers '/auth/providers'\n  public getProviders(): Observable<Response<Provider[], 'providers'>> {\n    return this.http.get<any>(this.serverService.apiServer + '/auth/providers')\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Response, Scenario} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET scenarios '/v1/scenarios'\n  public getScenarios(): Observable<Response<Scenario[], 'scenarios'>> {\n    return this.http.get<any>(this.serverService.query('scenarios'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET scenario '/v1/scenarios/{id}'\n  public getScenario(id: string): Observable<Response<Scenario, 'scenario'>> {\n    return this.http.get<any>(this.serverService.query('scenarios/' + id))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Filter, Response, Setting} from '../models';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET settings '/v1/settings'\n  public getSettings(filter?: Filter): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET setting '/v1/settings/{name}'\n  public getSetting(name: string, filter?: Filter): Observable<Response<Setting, 'setting'>> {\n    return this.http.get<any>(this.serverService.query('settings/' + name, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update setting '/v1/settings/{name}/update'\n  public updateSetting(setting: Setting, filter?: Filter): Observable<Response<Setting, 'setting'>> {\n    return this.http.post<any>(this.serverService.query('settings/' + name + '/update', filter), setting, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET settings default values '/v1/settings/defaults'\n  public getDefaults(filter?: Filter): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings/defaults', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ServerService} from './server.service';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Filter, Response, Synthesizer} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SynthesizerService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET synthesizers '/v1/synthesizers'\n  public getSynthesizers(filter?: Filter): Observable<Response<Synthesizer[], 'synthesizers'>> {\n    return this.http.get<any>(this.serverService.query('synthesizers', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Module, Filter, Response} from '../models';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET users '/v1/system/version'\n  public getVersion(filter?: Filter): Observable<Response<string, 'version'>> {\n    return this.http.get<any>(this.serverService.query('system/version', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/system/modules'\n  public getModules(filter?: Filter): Observable<Response<Module[], 'modules'>> {\n    return this.http.get<any>(this.serverService.query('system/modules', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST upload '/v1/upload'\n  public upload(file: File): Observable<any> {\n    // prepare data\n    const uploadData = new FormData();\n    // set file\n    uploadData.append('file', file);\n    // upload\n    return this.http.post<any>(this.serverService.query('upload'), uploadData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(\n      retry(1),\n      catchError(ErrorHelper.handleError)\n    );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Filter, Response, User} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET logged user '/v1/users/me'\n  public getLoggedUser(filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/me', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/users'\n  public getUsers(filter?: Filter): Observable<Response<User[], 'users'>> {\n    return this.http.get<any>(this.serverService.query('users', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET user '/v1/users/{username}'\n  public getUser(username: string, filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete user '/v1/users/{username}/delete'\n  public deleteUser(username: string): Observable<Response<string, 'username'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update user '/v1/users/{username}/update'\n  public updateUser(user: User, filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.post<any>(this.serverService.query('users/' + user.username + '/update', filter), user, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n"]}