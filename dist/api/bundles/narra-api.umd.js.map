{"version":3,"file":"narra-api.umd.js","sources":["../projects/api/src/lib/enums/event-status.enum.ts","../projects/api/src/lib/enums/item-type.enum.ts","../projects/api/src/lib/enums/query-operator.enum.ts","../projects/api/src/lib/enums/role-type.enum.ts","../projects/api/src/lib/enums/scenario-type.enum.ts","../projects/api/src/lib/enums/index.ts","../projects/api/src/lib/helpers/error.helper.ts","../projects/api/src/lib/helpers/meta.helper.ts","../projects/api/src/lib/helpers/index.ts","../projects/api/src/lib/models/index.ts","../projects/api/src/lib/services/server.service.ts","../projects/api/src/lib/services/connector.service.ts","../projects/api/src/lib/services/event.service.ts","../projects/api/src/lib/services/generator.service.ts","../projects/api/src/lib/services/item.service.ts","../projects/api/src/lib/services/library.service.ts","../projects/api/src/lib/services/project.service.ts","../projects/api/src/lib/services/provider.service.ts","../projects/api/src/lib/services/scenario.service.ts","../projects/api/src/lib/services/setting.service.ts","../projects/api/src/lib/services/synthesizer.service.ts","../projects/api/src/lib/services/system.service.ts","../projects/api/src/lib/services/upload.service.ts","../projects/api/src/lib/services/user.service.ts","../projects/api/src/lib/services/index.ts","../../projects/api/src/lib/index.ts","../../../projects/api/src/public-api.ts","../../../projects/api/src/narra-api.ts"],"sourcesContent":["/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum EventStatus {\r\n  pending = 'pending',\r\n  running = 'running',\r\n  done = 'done'\r\n}\r\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum ItemType {\r\n  text = 'text',\r\n  audio = 'audio',\r\n  video = 'video',\r\n  picture = 'picture'\r\n}\r\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport enum QueryOperator {\r\n  or = 'or',\r\n  and = 'and'\r\n}\r\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum RoleType {\n  admin = 'admin',\n  author = 'author'\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport enum ScenarioType {\n  project = 'project',\n  library = 'library'\n}\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport * from './event-status.enum';\r\nexport * from './item-type.enum';\r\nexport * from './query-operator.enum';\r\nexport * from './role-type.enum';\r\nexport * from './scenario-type.enum';\r\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {throwError} from 'rxjs';\n\nexport class ErrorHelper {\n\n  public static handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Meta, Metable} from '../models';\n\nexport class MetaHelper {\n\n  public static getMeta(object: Metable, name: string): Meta {\n    return object.metadata.find((meta) => {\n      return meta.name === name;\n    });\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport * from './error.helper';\nexport * from './meta.helper';\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport * from './author';\r\nexport * from './candidate';\r\nexport * from './connector';\r\nexport * from './event';\r\nexport * from './error';\r\nexport * from './generator';\r\nexport * from './item';\r\nexport * from './ingest';\r\nexport * from './library';\r\nexport * from './meta';\r\nexport * from './metable';\r\nexport * from './module';\r\nexport * from './authorship';\r\nexport * from './pagination';\r\nexport * from './pendable';\r\nexport * from './project';\r\nexport * from './provider';\r\nexport * from './proxy';\r\nexport * from './purgable';\r\nexport * from './response';\r\nexport * from './scenario';\r\nexport * from './selectable';\r\nexport * from './setting';\r\nexport * from './synthesizer';\r\nexport * from './user';\r\nexport * from './video';\r\nexport * from './query';\r\nexport * from './filter';\r\nexport * from './selector';\r\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {Pagination, Filter, Selector, Query} from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n  private server: string;\n  private version: number;\n  private initialized: boolean;\n\n  constructor() {\n    // default values\n    this.server = 'http://api.narra';\n    this.version = 1;\n    this.initialized = false;\n  }\n\n  //\n  // initialize\n  //\n  public initialize(server?: string, version?: number): void {\n    // set server if provided\n    if (server) {\n      this.server = server;\n    }\n    // set version if provided\n    if (version) {\n      this.version = version;\n    }\n    // set init flag\n    this.initialized = true;\n  }\n\n  //\n  // getters\n  //\n  public get apiServer(): string {\n    return this.server;\n  }\n\n  public get apiVersion(): number {\n    return this.version;\n  }\n\n  public get isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  //\n  // public methods\n  //\n  public query(path: string, filter?: Filter, pagination?: Pagination, query?: Query, selectors?: Selector[]): string {\n    // prepare params\n    let params = `${path}?`;\n    // filters\n    if (filter) {\n      filter.filters.forEach((f: string) => {\n        params += `filters[]=${f}&`;\n      });\n    }\n    // selectors\n    if (selectors) {\n      selectors.forEach((selector) => {\n        selector.content.forEach((value) => {\n          params += `${selector.name}[]=${value}&`;\n        });\n      });\n    }\n    // query\n    if (query) {\n      // add query fields\n      params += `query=${query.query}&`;\n      // add operator\n      if (query.queryOperator) {\n        params += `query_operator=${query.queryOperator}&`;\n      }\n      // add fields\n      if (query.queryFields) {\n        query.queryFields.forEach((field) => {\n          params += `query_fields[]=${field}&`;\n        });\n      }\n    }\n    // pagination\n    if (pagination) {\n      // add pagination parameters\n      params += `page=${pagination.page}&per_page=${pagination.perPage}&offset=${pagination.offset}`;\n    }\n    // check for pagination\n    return this.server + '/v' + this.version + '/' + params;\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Connector, Filter, Response} from '../models';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET connectors '/v1/connectors'\n  public getConnectors(filter?: Filter): Observable<Response<Connector[], 'connectors'>> {\n    return this.http.get<any>(this.serverService.query('connectors', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Event, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET events by default '/v1/events/me' possibly can be modified to admin's all '/v1/events'\n  public getEvents(selection: string = 'me', filter?: Filter): Observable<Response<Event[], 'events'>> {\n    return this.http.get<any>(this.serverService.query('events/' + selection, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Generator, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneratorService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET generators '/v1/generators'\n  public getGenerators(filter?: Filter): Observable<Response<Generator[], 'generators'>> {\n    return this.http.get<any>(this.serverService.query('generators', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {catchError, map, mergeMap, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Candidate, Item, Library, Meta, Proxy, Filter, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST check url '/v1/items/check'\n  public check(url: string, filter?: Filter): Observable<Response<Proxy[], 'proxies'>> {\n    return this.http.post<any>(this.serverService.query('items/check', filter), { url }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new item '/v1/items/new'\n  public addItems(candidates: Candidate[], filter?: Filter): Observable<Response<string[], 'events'>> {\n    return this.http.post<any>(this.serverService.query('items/new', filter), { candidates }, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET item '/v1/items/{id}'\n  public getItem(id: string, filter?: Filter): Observable<Response<Item, 'item'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n\n  // POST new item metadata '/v1/items/{name}/metadata/new'\n  public addItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update item metadata '/v1/items/{name}/metadata/{meta}/update'\n  public updateItemMeta(id: string, meta: Pick<Meta, 'name' | 'value' | 'generator'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete item metadata '/v1/items/{name}/metadata/{meta}/delete'\n  public deleteItemMeta(id: string, meta: Pick<Meta, 'name' | 'generator'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('items/' + id + '/metadata/' + meta.name + '/delete?generator=' + meta.generator))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Filter, Response, Query} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibraryService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/libraries/validate'\n  public validate(name: string, filter?: Filter): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('libraries/validate', filter), {name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET libraries '/v1/libraries'\n  public getLibraries(filter?: Filter): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('libraries', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library '/v1/libraries/{id}'\n  public getLibrary(id: string, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET library items '/v1/libraries/{id}/items'\n  public getItems(id: string, filter?: Filter, pagination?: Pagination, query?: Query): Observable<Response<Item[], 'items'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/items', filter, pagination, query))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST delete library items '/v1/libraries/{id}/items/delete'\n  public deleteItems(id: string, items: string[]): Observable<Response<string[], 'ids'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/items/delete'), {items}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library '/v1/libraries/new'\n  public addLibrary(library: Library, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/new', filter), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library '/v1/libraries/{id}/update'\n  public updateLibrary(library: Library, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + library.id + '/update', filter), library, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET clean library '/v1/libraries/{id}/clean'\n  public cleanLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/clean'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library '/v1/libraries/{id}/delete'\n  public deleteLibrary(id: string): Observable<Response<string, 'id'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new library metadata '/v1/libraries/{name}/metadata/new'\n  public addLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update library metadata '/v1/libraries/{name}/metadata/{meta}/update'\n  public updateLibraryMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete library metadata '/v1/libraries/{name}/metadata/{meta}/delete'\n  public deleteLibraryMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('libraries/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Item, Library, Meta, Pagination, Project, Filter, Response, Query} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST validate '/v1/projects/validate'\n  public validate(id: string, name: string, filter?: Filter): Observable<Response<boolean, 'validation'>> {\n    return this.http.post<any>(this.serverService.query('projects/validate', filter), {id, name}, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET projects '/v1/projects'\n  public getProjects(filter?: Filter): Observable<Response<Project[], 'projects'>> {\n    return this.http.get<any>(this.serverService.query('projects', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project '/v1/projects/{name}'\n  public getProject(id: string, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's items '/v1/projects/{id}/items'\n  // default libraries selector: all\n  // default meta selector: none\n  public getProjectItems(id: string, libraries?: string[], meta?: string[], query?: Query, filter?: Filter, pagination?: Pagination): Observable<Response<Item[], 'items'>> {\n    // prepare selectors\n    const selectors = [];\n    // libraries selector\n    if (libraries) {\n      selectors.push({name: 'libraries', content: libraries});\n    }\n    // meta selector\n    if (meta) {\n      selectors.push({name: 'meta', content: meta});\n    }\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/items', filter, pagination, query, selectors))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's libraries '/v1/projects/{id}/libraries'\n  public getProjectLibraries(id: string, filter?: Filter): Observable<Response<Library[], 'libraries'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET project's library '/v1/projects/{id}/libraries/{library}'\n  public getProjectLibrary(id: string, library: string, filter?: Filter): Observable<Response<Library, 'library'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/libraries/' + library, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project '/v1/projects/new'\n  public addProject(project: Project, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/new', filter), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project '/v1/projects/{name}/update'\n  public updateProject(project: Project, filter?: Filter): Observable<Response<Project, 'project'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + project.id + '/update', filter), project, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project '/v1/projects/{name}/delete'\n  public deleteProject(id: string): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST new project metadata '/v1/projects/{name}/metadata/new'\n  public addProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/new', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update project metadata '/v1/projects/{name}/metadata/{meta}/update'\n  public updateProjectMeta(id: string, meta: Pick<Meta, 'name' | 'value'>, filter?: Filter): Observable<Response<Meta, 'metadata'>> {\n    return this.http.post<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/update', filter), meta, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete project metadata '/v1/projects/{name}/metadata/{meta}/delete'\n  public deleteProjectMeta(id: string, meta: Pick<Meta, 'name'>): Observable<Response<string, 'name'>> {\n    return this.http.get<any>(this.serverService.query('projects/' + id + '/metadata/' + meta.name + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {retry, catchError} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Provider, Response} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProviderService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET authentication providers '/auth/providers'\n  public getProviders(): Observable<Response<Provider[], 'providers'>> {\n    return this.http.get<any>(this.serverService.apiServer + '/auth/providers')\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Response, Scenario} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET scenarios '/v1/scenarios'\n  public getScenarios(): Observable<Response<Scenario[], 'scenarios'>> {\n    return this.http.get<any>(this.serverService.query('scenarios'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET scenario '/v1/scenarios/{id}'\n  public getScenario(id: string): Observable<Response<Scenario, 'scenario'>> {\n    return this.http.get<any>(this.serverService.query('scenarios/' + id))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Filter, Response, Setting} from '../models';\nimport {catchError, map, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET settings '/v1/settings'\n  public getSettings(filter?: Filter): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET setting '/v1/settings/{name}'\n  public getSetting(name: string, filter?: Filter): Observable<Response<Setting, 'setting'>> {\n    return this.http.get<any>(this.serverService.query('settings/' + name, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update setting '/v1/settings/{name}/update'\n  public updateSetting(setting: Setting, filter?: Filter): Observable<Response<Setting, 'setting'>> {\n    return this.http.post<any>(this.serverService.query('settings/' + name + '/update', filter), setting, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET settings default values '/v1/settings/defaults'\n  public getDefaults(filter?: Filter): Observable<Response<Setting[], 'settings'>> {\n    return this.http.get<any>(this.serverService.query('settings/defaults', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ServerService} from './server.service';\nimport {catchError, retry} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Filter, Response, Synthesizer} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SynthesizerService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET synthesizers '/v1/synthesizers'\n  public getSynthesizers(filter?: Filter): Observable<Response<Synthesizer[], 'synthesizers'>> {\n    return this.http.get<any>(this.serverService.query('synthesizers', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Module, Filter, Response} from '../models';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET users '/v1/system/version'\n  public getVersion(filter?: Filter): Observable<Response<string, 'version'>> {\n    return this.http.get<any>(this.serverService.query('system/version', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/system/modules'\n  public getModules(filter?: Filter): Observable<Response<Module[], 'modules'>> {\n    return this.http.get<any>(this.serverService.query('system/modules', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // POST upload '/v1/upload'\n  public upload(file: File): Observable<any> {\n    // prepare data\n    const uploadData = new FormData();\n    // set file\n    uploadData.append('file', file);\n    // upload\n    return this.http.post<any>(this.serverService.query('upload'), uploadData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(\n      retry(1),\n      catchError(ErrorHelper.handleError)\n    );\n  }\n}\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {ServerService} from './server.service';\nimport {Filter, Response, User} from '../models';\nimport {ErrorHelper} from '../helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient, private serverService: ServerService) {\n  }\n\n  // GET logged user '/v1/users/me'\n  public getLoggedUser(filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/me', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET users '/v1/users'\n  public getUsers(filter?: Filter): Observable<Response<User[], 'users'>> {\n    return this.http.get<any>(this.serverService.query('users', filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET user '/v1/users/{username}'\n  public getUser(username: string, filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username, filter))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // GET delete user '/v1/users/{username}/delete'\n  public deleteUser(username: string): Observable<Response<string, 'username'>> {\n    return this.http.get<any>(this.serverService.query('users/' + username + '/delete'))\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n\n  // POST update user '/v1/users/{username}/update'\n  public updateUser(user: User, filter?: Filter): Observable<Response<User, 'user'>> {\n    return this.http.post<any>(this.serverService.query('users/' + user.username + '/update', filter), user, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(ErrorHelper.handleError)\n      );\n  }\n}\n","/**\r\n * @license\r\n *\r\n * Copyright (C) 2020 narra.eu\r\n *\r\n * This file is part of Narra Angular API.\r\n *\r\n * Narra Angular API is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Narra Angular API is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * Authors: Michal Mocnak <michal@narra.eu>\r\n */\r\n\r\nexport * from './connector.service';\r\nexport * from './event.service';\r\nexport * from './generator.service';\r\nexport * from './item.service';\r\nexport * from './library.service';\r\nexport * from './project.service';\r\nexport * from './provider.service';\r\nexport * from './scenario.service';\r\nexport * from './server.service';\r\nexport * from './setting.service';\r\nexport * from './synthesizer.service';\r\nexport * from './system.service';\r\nexport * from './upload.service';\r\nexport * from './user.service';\r\n","/**\n * @license\n *\n * Copyright (C) 2020 narra.eu\n *\n * This file is part of Narra Angular API.\n *\n * Narra Angular API is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Narra Angular API is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Narra Angular API. If not, see <http://www.gnu.org/licenses/>.\n *\n * Authors: Michal Mocnak <michal@narra.eu>\n */\n\nexport * from './enums';\nexport * from './helpers';\nexport * from './models';\nexport * from './services';\n","/*\n * Public API Surface of @narra/api\n */\n\nexport * as narra from './lib';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["throwError","Injectable","retry","catchError","HttpClient","HttpHeaders"],"mappings":"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"}